{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n}; // pomoci createSlice delame slice naseho global state.\n// kazdy slice musi mit svuj name, initialState a reducers (metody), ktere tento slice potrebuje.\n// PRI POUZITI TOOLKITU UZ NEPOTREBUJEME IF CHECKS. VYLOZENE JEN PISEME METODY.\n// NAVIC MUZEME MUTOVAT STATE!!!!!!!!! ALE NE PRIMO. napiseme napr. state.counter++, coz je vlastne spatne. Ale redux Toolkit ma dalsi\n// package, pomoci ktereho si naclonuje stav a nedojde k mutovani stavu, nasledne prepise jen to, co my menime in immutable way. takhle se nam zjednodusi prace. nemusime pokazde opisovat stavovy objekt.\n\ncreateSlice({\n  name: 'counter',\n  initialState,\n  // takhle je to pomoci moderniho JS. pomoci stareho zpusobu: initialState: initialState,\n  reducers: {\n    // vsechny reducers muzou mit v inputu state a action. u incremenetu a decrementu jsme ale action nepotrebovali.\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.value; // zde to nezapisujeme jako cast objektu (tzn. state.counter: state.counter+1), ale vylozene prepisujeme state.counter = ...\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\n\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  // default state je InitialState\n  // pomoci reduxu vzdycky overwritujeme stary stav nejakym novym stavem.\n  if (action.type === \"increment\") {\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter // tohle nechame stejnee (tedy state). kdyz bychom to tady nenapsali,\n      // tak by to bylo undefined, coz se bere jako false, takze by ten counter zmizel.\n\n    };\n  }\n\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.value,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === \"decrement\") {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === \"toggle\") {\n    return {\n      counter: state.counter,\n      showCounter: !state.showCounter\n    };\n  }\n\n  return state;\n};\n\nconst store = createStore(counterReducer);\nexport default store; // postupne ale tento soubor zacina nabobtnavat a je slozitejsi handlovat ty states. proto pouzivame redux Toolkit.\n// instalace redux toolkitu: npm install @reduxjs/toolkit\n\n/*\r\nDULEZITA POZNAMKA:\r\nNIKDY NESMIME MUTOVAT STATE:\r\nTohle je spatne:\r\nif (action.type === 'increment') {\r\n    state.counter++; // NEMUZEME MUTOVAT STAV. JEN VYTVARET NOVE OBJEKTY.\r\n    return state;\r\n}\r\n\r\nI tohle je spatne: \r\nif (action.type === 'increment') {\r\n    state.counter++;\r\n    return {\r\n        counter: state.counter,\r\n        showCounter: state.showCounter,\r\n    };\r\n}\r\n*/","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/redux-projekt-1/01-starting-project (2)/01-starting-project/src/store/index.js"],"names":["createStore","createSlice","initialState","counter","showCounter","name","reducers","increment","state","decrement","increase","action","value","toggleCounter","counterReducer","type","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAAQC,WAAR,QAA0B,kBAA1B;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAArB,C,CAEA;AACA;AACA;AACA;AACA;;AACAH,WAAW,CAAC;AACRI,EAAAA,IAAI,EAAE,SADE;AAERH,EAAAA,YAFQ;AAEM;AACdI,EAAAA,QAAQ,EAAE;AACN;AACAC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACL,OAAN;AACH,KAJK;;AAKNM,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACL,OAAN;AACH,KAPK;;AAQNO,IAAAA,QAAQ,CAACF,KAAD,EAAOG,MAAP,EAAe;AACnBH,MAAAA,KAAK,CAACL,OAAN,GAAgBK,KAAK,CAACL,OAAN,GAAgBQ,MAAM,CAACC,KAAvC,CADmB,CAC2B;AACjD,KAVK;;AAWNC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACJ,WAAN,GAAoB,CAACI,KAAK,CAACJ,WAA3B;AACH;;AAbK;AAHF,CAAD,CAAX;;AAoBA,MAAMU,cAAc,GAAG,YAAkC;AAAA,MAAjCN,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXS,MAAW;;AACvD;AAEA;AACA,MAAIA,MAAM,CAACI,IAAP,KAAgB,WAApB,EAAiC;AAC/B,WAAO;AACLZ,MAAAA,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgB,CADpB;AAELC,MAAAA,WAAW,EAAEI,KAAK,CAACJ,WAFd,CAE2B;AAChC;;AAHK,KAAP;AAKD;;AAED,MAAIO,MAAM,CAACI,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAO;AACLZ,MAAAA,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgBQ,MAAM,CAACC,KAD3B;AAELR,MAAAA,WAAW,EAAEI,KAAK,CAACJ;AAFd,KAAP;AAID;;AAED,MAAIO,MAAM,CAACI,IAAP,KAAgB,WAApB,EAAiC;AAC/B,WAAO;AACLZ,MAAAA,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgB,CADpB;AAELC,MAAAA,WAAW,EAAEI,KAAK,CAACJ;AAFd,KAAP;AAID;;AAED,MAAIO,MAAM,CAACI,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO;AACLZ,MAAAA,OAAO,EAAEK,KAAK,CAACL,OADV;AAELC,MAAAA,WAAW,EAAE,CAACI,KAAK,CAACJ;AAFf,KAAP;AAID;;AAED,SAAOI,KAAP;AACD,CAlCD;;AAoCA,MAAMQ,KAAK,GAAGhB,WAAW,CAACc,cAAD,CAAzB;AAEA,eAAeE,KAAf,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createStore } from \"redux\";\r\nimport {createSlice} from '@reduxjs/toolkit';\r\n\r\nconst initialState = { counter: 0, showCounter: true };\r\n\r\n// pomoci createSlice delame slice naseho global state.\r\n// kazdy slice musi mit svuj name, initialState a reducers (metody), ktere tento slice potrebuje.\r\n// PRI POUZITI TOOLKITU UZ NEPOTREBUJEME IF CHECKS. VYLOZENE JEN PISEME METODY.\r\n// NAVIC MUZEME MUTOVAT STATE!!!!!!!!! ALE NE PRIMO. napiseme napr. state.counter++, coz je vlastne spatne. Ale redux Toolkit ma dalsi\r\n// package, pomoci ktereho si naclonuje stav a nedojde k mutovani stavu, nasledne prepise jen to, co my menime in immutable way. takhle se nam zjednodusi prace. nemusime pokazde opisovat stavovy objekt.\r\ncreateSlice({\r\n    name: 'counter',\r\n    initialState, // takhle je to pomoci moderniho JS. pomoci stareho zpusobu: initialState: initialState,\r\n    reducers: {\r\n        // vsechny reducers muzou mit v inputu state a action. u incremenetu a decrementu jsme ale action nepotrebovali.\r\n        increment(state) {\r\n            state.counter++;\r\n        },\r\n        decrement(state) {\r\n            state.counter--;\r\n        },\r\n        increase(state,action) {\r\n            state.counter = state.counter + action.value; // zde to nezapisujeme jako cast objektu (tzn. state.counter: state.counter+1), ale vylozene prepisujeme state.counter = ...\r\n        },\r\n        toggleCounter(state) {\r\n            state.showCounter = !state.showCounter;\r\n        },\r\n    }\r\n});\r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n  // default state je InitialState\r\n\r\n  // pomoci reduxu vzdycky overwritujeme stary stav nejakym novym stavem.\r\n  if (action.type === \"increment\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter, // tohle nechame stejnee (tedy state). kdyz bychom to tady nenapsali,\r\n      // tak by to bylo undefined, coz se bere jako false, takze by ten counter zmizel.\r\n    };\r\n  }\r\n\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      counter: state.counter + action.value,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"decrement\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      counter: state.counter,\r\n      showCounter: !state.showCounter,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst store = createStore(counterReducer);\r\n\r\nexport default store;\r\n\r\n// postupne ale tento soubor zacina nabobtnavat a je slozitejsi handlovat ty states. proto pouzivame redux Toolkit.\r\n// instalace redux toolkitu: npm install @reduxjs/toolkit\r\n\r\n/*\r\nDULEZITA POZNAMKA:\r\nNIKDY NESMIME MUTOVAT STATE:\r\nTohle je spatne:\r\nif (action.type === 'increment') {\r\n    state.counter++; // NEMUZEME MUTOVAT STAV. JEN VYTVARET NOVE OBJEKTY.\r\n    return state;\r\n}\r\n\r\nI tohle je spatne: \r\nif (action.type === 'increment') {\r\n    state.counter++;\r\n    return {\r\n        counter: state.counter,\r\n        showCounter: state.showCounter,\r\n    };\r\n}\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}