{"ast":null,"code":"// import { createStore } from \"redux\"; // tohle jme pouzivali kdyz jsme nemeli toolkit. ted pouzivame configureStore.\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n}; // pomoci createSlice delame slice naseho global state.\n// kazdy slice musi mit svuj name, initialState a reducers (metody), ktere tento slice potrebuje.\n// PRI POUZITI TOOLKITU UZ NEPOTREBUJEME IF CHECKS. VYLOZENE JEN PISEME METODY.\n// NAVIC MUZEME MUTOVAT STATE!!!!!!!!! ALE NE PRIMO. napiseme napr. state.counter++, coz je vlastne spatne. Ale redux Toolkit ma dalsi\n// package, pomoci ktereho si naclonuje stav a nedojde k mutovani stavu, nasledne prepise jen to, co my menime in immutable way. takhle se nam zjednodusi prace. nemusime pokazde opisovat stavovy objekt.\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialCounterState,\n  // takhle je to pomoci moderniho JS. pomoci stareho zpusobu: initialState: initialState,\n  reducers: {\n    // vsechny reducers muzou mit v inputu state a action. u incremenetu a decrementu jsme ale action nepotrebovali.\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload; // zde to nezapisujeme jako cast objektu (tzn. state.counter: state.counter+1), ale vylozene prepisujeme state.counter = ...\n      // bereme payload (automaticky vytvorene v tom objektu). ne value.\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n}); // vytvorime novy slice pro authentication\n\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: \"authentication\",\n  initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n}); // takhle to jde zapsat: const store = createStore(counterSlice.reducer); // ten nas reducer je vlastne vice reduceru v jednom.\n// ale problem by byl, kdybychom meli vice slicu. protoze do createStore jde zapsat jen jeden reducer.\n// proto pouzijeme configureStore\n// do configure objektu zapiseme reducer. opet to musi byt ve vysledku jen jeden reducer. ale muzeme to zapsat nasledovne, aby vznikla mapa reduceru.\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  } // reducer: counterSlice.reducer, //kdyz jsme meli jen counter, tak to sl ozapsat takhle, protoze mame jen jeden slice.\n\n}); // dispatching actions\n//counterSlice.actions.toggleCounter() // it will create an action obejct with unique identifiers.\n\nexport const counterActions = counterSlice.actions;\nexport default store; //---------------------------------------------------------------------------------------------------------\n// postupne tento soubor zacinal nabobtnavat a je slozitejsi handlovat ty states. proto pouzivame redux Toolkit.\n// instalace redux toolkitu: npm install @reduxjs/toolkit\n\n/*\r\nTakhle to bylo pomoci if checks a reducers, tzn. bez REDUX TOOLKIT.\r\nconst counterReducer = (state = initialState, action) => {\r\n  // default state je InitialState\r\n\r\n  // pomoci reduxu vzdycky overwritujeme stary stav nejakym novym stavem.\r\n  if (action.type === \"increment\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter, // tohle nechame stejnee (tedy state). kdyz bychom to tady nenapsali,\r\n      // tak by to bylo undefined, coz se bere jako false, takze by ten counter zmizel.\r\n    };\r\n  }\r\n\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      counter: state.counter + action.value,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"decrement\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      counter: state.counter,\r\n      showCounter: !state.showCounter,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst store = createStore(counterReducer);\r\n*/\n\n/*\r\nDULEZITA POZNAMKA:\r\nNIKDY NESMIME MUTOVAT STATE:\r\nTohle je spatne:\r\nif (action.type === 'increment') {\r\n    state.counter++; // NEMUZEME MUTOVAT STAV. JEN VYTVARET NOVE OBJEKTY.\r\n    return state;\r\n}\r\n\r\nI tohle je spatne: \r\nif (action.type === 'increment') {\r\n    state.counter++;\r\n    return {\r\n        counter: state.counter,\r\n        showCounter: state.showCounter,\r\n    };\r\n}\r\n*/","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/redux-projekt-1/01-starting-project (2)/01-starting-project/src/store/index.js"],"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterActions","actions"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAA5B,C,CAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC/BM,EAAAA,IAAI,EAAE,SADyB;AAE/BJ,EAAAA,mBAF+B;AAEV;AACrBK,EAAAA,QAAQ,EAAE;AACR;AACAC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN;AACD,KAJO;;AAKRO,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN;AACD,KAPO;;AAQRQ,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACtBH,MAAAA,KAAK,CAACN,OAAN,GAAgBM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,OAAvC,CADsB,CAC0B;AAChD;AACD,KAXO;;AAYRC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AACnBA,MAAAA,KAAK,CAACL,WAAN,GAAoB,CAACK,KAAK,CAACL,WAA3B;AACD;;AAdO;AAHqB,CAAD,CAAhC,C,CAqBA;;AACA,MAAMW,gBAAgB,GAAG;AACvBC,EAAAA,eAAe,EAAE;AADM,CAAzB;AAIA,MAAMC,SAAS,GAAGjB,WAAW,CAAC;AAC5BM,EAAAA,IAAI,EAAE,gBADsB;AAE5BS,EAAAA,gBAF4B;AAG5BR,EAAAA,QAAQ,EAAE;AACRW,IAAAA,KAAK,CAACT,KAAD,EAAQ;AACXA,MAAAA,KAAK,CAACO,eAAN,GAAwB,IAAxB;AACD,KAHO;;AAIRG,IAAAA,MAAM,CAACV,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACO,eAAN,GAAwB,KAAxB;AACD;;AANO;AAHkB,CAAD,CAA7B,C,CAaA;AACA;AACA;AACA;;AACA,MAAMI,KAAK,GAAGnB,cAAc,CAAC;AAC3BoB,EAAAA,OAAO,EAAE;AAAElB,IAAAA,OAAO,EAAEE,YAAY,CAACgB,OAAxB;AAAiCC,IAAAA,IAAI,EAAEL,SAAS,CAACI;AAAjD,GADkB,CAE3B;;AAF2B,CAAD,CAA5B,C,CAKA;AACA;;AACA,OAAO,MAAME,cAAc,GAAGlB,YAAY,CAACmB,OAApC;AAEP,eAAeJ,KAAf,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { createStore } from \"redux\"; // tohle jme pouzivali kdyz jsme nemeli toolkit. ted pouzivame configureStore.\r\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCounterState = { counter: 0, showCounter: true };\r\n\r\n// pomoci createSlice delame slice naseho global state.\r\n// kazdy slice musi mit svuj name, initialState a reducers (metody), ktere tento slice potrebuje.\r\n// PRI POUZITI TOOLKITU UZ NEPOTREBUJEME IF CHECKS. VYLOZENE JEN PISEME METODY.\r\n// NAVIC MUZEME MUTOVAT STATE!!!!!!!!! ALE NE PRIMO. napiseme napr. state.counter++, coz je vlastne spatne. Ale redux Toolkit ma dalsi\r\n// package, pomoci ktereho si naclonuje stav a nedojde k mutovani stavu, nasledne prepise jen to, co my menime in immutable way. takhle se nam zjednodusi prace. nemusime pokazde opisovat stavovy objekt.\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialCounterState, // takhle je to pomoci moderniho JS. pomoci stareho zpusobu: initialState: initialState,\r\n  reducers: {\r\n    // vsechny reducers muzou mit v inputu state a action. u incremenetu a decrementu jsme ale action nepotrebovali.\r\n    increment(state) {\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    increase(state, action) {\r\n      state.counter = state.counter + action.payload; // zde to nezapisujeme jako cast objektu (tzn. state.counter: state.counter+1), ale vylozene prepisujeme state.counter = ...\r\n      // bereme payload (automaticky vytvorene v tom objektu). ne value.\r\n    },\r\n    toggleCounter(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\n// vytvorime novy slice pro authentication\r\nconst initialAuthState = {\r\n  isAuthenticated: false,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: \"authentication\",\r\n  initialAuthState,\r\n  reducers: {\r\n    login(state) {\r\n      state.isAuthenticated = true;\r\n    },\r\n    logout(state) {\r\n      state.isAuthenticated = false;\r\n    },\r\n  },\r\n});\r\n\r\n// takhle to jde zapsat: const store = createStore(counterSlice.reducer); // ten nas reducer je vlastne vice reduceru v jednom.\r\n// ale problem by byl, kdybychom meli vice slicu. protoze do createStore jde zapsat jen jeden reducer.\r\n// proto pouzijeme configureStore\r\n// do configure objektu zapiseme reducer. opet to musi byt ve vysledku jen jeden reducer. ale muzeme to zapsat nasledovne, aby vznikla mapa reduceru.\r\nconst store = configureStore({\r\n  reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\r\n  // reducer: counterSlice.reducer, //kdyz jsme meli jen counter, tak to sl ozapsat takhle, protoze mame jen jeden slice.\r\n});\r\n\r\n// dispatching actions\r\n//counterSlice.actions.toggleCounter() // it will create an action obejct with unique identifiers.\r\nexport const counterActions = counterSlice.actions;\r\n\r\nexport default store;\r\n\r\n//---------------------------------------------------------------------------------------------------------\r\n// postupne tento soubor zacinal nabobtnavat a je slozitejsi handlovat ty states. proto pouzivame redux Toolkit.\r\n// instalace redux toolkitu: npm install @reduxjs/toolkit\r\n\r\n/*\r\nTakhle to bylo pomoci if checks a reducers, tzn. bez REDUX TOOLKIT.\r\nconst counterReducer = (state = initialState, action) => {\r\n  // default state je InitialState\r\n\r\n  // pomoci reduxu vzdycky overwritujeme stary stav nejakym novym stavem.\r\n  if (action.type === \"increment\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter, // tohle nechame stejnee (tedy state). kdyz bychom to tady nenapsali,\r\n      // tak by to bylo undefined, coz se bere jako false, takze by ten counter zmizel.\r\n    };\r\n  }\r\n\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      counter: state.counter + action.value,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"decrement\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      counter: state.counter,\r\n      showCounter: !state.showCounter,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst store = createStore(counterReducer);\r\n*/\r\n\r\n/*\r\nDULEZITA POZNAMKA:\r\nNIKDY NESMIME MUTOVAT STATE:\r\nTohle je spatne:\r\nif (action.type === 'increment') {\r\n    state.counter++; // NEMUZEME MUTOVAT STAV. JEN VYTVARET NOVE OBJEKTY.\r\n    return state;\r\n}\r\n\r\nI tohle je spatne: \r\nif (action.type === 'increment') {\r\n    state.counter++;\r\n    return {\r\n        counter: state.counter,\r\n        showCounter: state.showCounter,\r\n    };\r\n}\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}