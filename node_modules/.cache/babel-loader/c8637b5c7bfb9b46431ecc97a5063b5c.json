{"ast":null,"code":"// import { createStore } from \"redux\"; // tohle jme pouzivali kdyz jsme nemeli toolkit. ted pouzivame configureStore.\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counter\";\nimport authReducer from \"./auth\"; // takhle to jde zapsat: const store = createStore(counterSlice.reducer); // ten nas reducer je vlastne vice reduceru v jednom.\n// ale problem by byl, kdybychom meli vice slicu. protoze do createStore jde zapsat jen jeden reducer.\n// proto pouzijeme configureStore\n// do configure objektu zapiseme reducer. opet to musi byt ve vysledku jen jeden reducer. ale muzeme to zapsat nasledovne, aby vznikla mapa reduceru.\n\nconst store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    auth: authReducer\n  } //takhle to bylo predtim nez jsme to splittli do vice slozek: reducer: { counter: counterSlice.reducer, auth: authSlice.reducer }, // ty reducery se pak mergnou do jednoho velkeho reduceru.\n  // reducer: counterSlice.reducer, //kdyz jsme meli jen counter, tak to sl ozapsat takhle, protoze mame jen jeden slice.\n\n}); // dispatching actions - puvodne to bylo zde, pred splittnutim do vice slozek.\n//counterSlice.actions.toggleCounter() // it will create an action obejct with unique identifiers.\n//export const counterActions = counterSlice.actions;\n// export const authActions = authSlice.actions;\n\nexport default store; //---------------------------------------------------------------------------------------------------------\n// postupne tento soubor zacinal nabobtnavat a je slozitejsi handlovat ty states. proto pouzivame redux Toolkit.\n// instalace redux toolkitu: npm install @reduxjs/toolkit\n\n/*\r\nTakhle to bylo pomoci if checks a reducers, tzn. bez REDUX TOOLKIT.\r\nconst counterReducer = (state = initialState, action) => {\r\n  // default state je InitialState\r\n\r\n  // pomoci reduxu vzdycky overwritujeme stary stav nejakym novym stavem.\r\n  if (action.type === \"increment\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter, // tohle nechame stejnee (tedy state). kdyz bychom to tady nenapsali,\r\n      // tak by to bylo undefined, coz se bere jako false, takze by ten counter zmizel.\r\n    };\r\n  }\r\n\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      counter: state.counter + action.value,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"decrement\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      counter: state.counter,\r\n      showCounter: !state.showCounter,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst store = createStore(counterReducer);\r\n*/\n\n/*\r\nDULEZITA POZNAMKA:\r\nNIKDY NESMIME MUTOVAT STATE:\r\nTohle je spatne:\r\nif (action.type === 'increment') {\r\n    state.counter++; // NEMUZEME MUTOVAT STAV. JEN VYTVARET NOVE OBJEKTY.\r\n    return state;\r\n}\r\n\r\nI tohle je spatne: \r\nif (action.type === 'increment') {\r\n    state.counter++;\r\n    return {\r\n        counter: state.counter,\r\n        showCounter: state.showCounter,\r\n    };\r\n}\r\n*/","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/redux-projekt-1/01-starting-project (2)/01-starting-project/src/store/index.js"],"names":["configureStore","counterReducer","authReducer","store","reducer","counter","auth"],"mappings":"AAAA;AACA,SAASA,cAAT,QAA+B,kBAA/B;AAEA,OAAOC,cAAP,MAA2B,WAA3B;AACA,OAAOC,WAAP,MAAwB,QAAxB,C,CAEA;AACA;AACA;AACA;;AACA,MAAMC,KAAK,GAAGH,cAAc,CAAC;AAC3BI,EAAAA,OAAO,EAAE;AAAEC,IAAAA,OAAO,EAAEJ,cAAX;AAA2BK,IAAAA,IAAI,EAAEJ;AAAjC,GADkB,CAE3B;AACA;;AAH2B,CAAD,CAA5B,C,CAMA;AACA;AACA;AACA;;AAEA,eAAeC,KAAf,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { createStore } from \"redux\"; // tohle jme pouzivali kdyz jsme nemeli toolkit. ted pouzivame configureStore.\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport counterReducer from \"./counter\";\r\nimport authReducer from \"./auth\";\r\n\r\n// takhle to jde zapsat: const store = createStore(counterSlice.reducer); // ten nas reducer je vlastne vice reduceru v jednom.\r\n// ale problem by byl, kdybychom meli vice slicu. protoze do createStore jde zapsat jen jeden reducer.\r\n// proto pouzijeme configureStore\r\n// do configure objektu zapiseme reducer. opet to musi byt ve vysledku jen jeden reducer. ale muzeme to zapsat nasledovne, aby vznikla mapa reduceru.\r\nconst store = configureStore({\r\n  reducer: { counter: counterReducer, auth: authReducer },\r\n  //takhle to bylo predtim nez jsme to splittli do vice slozek: reducer: { counter: counterSlice.reducer, auth: authSlice.reducer }, // ty reducery se pak mergnou do jednoho velkeho reduceru.\r\n  // reducer: counterSlice.reducer, //kdyz jsme meli jen counter, tak to sl ozapsat takhle, protoze mame jen jeden slice.\r\n});\r\n\r\n// dispatching actions - puvodne to bylo zde, pred splittnutim do vice slozek.\r\n//counterSlice.actions.toggleCounter() // it will create an action obejct with unique identifiers.\r\n//export const counterActions = counterSlice.actions;\r\n// export const authActions = authSlice.actions;\r\n\r\nexport default store;\r\n\r\n//---------------------------------------------------------------------------------------------------------\r\n// postupne tento soubor zacinal nabobtnavat a je slozitejsi handlovat ty states. proto pouzivame redux Toolkit.\r\n// instalace redux toolkitu: npm install @reduxjs/toolkit\r\n\r\n/*\r\nTakhle to bylo pomoci if checks a reducers, tzn. bez REDUX TOOLKIT.\r\nconst counterReducer = (state = initialState, action) => {\r\n  // default state je InitialState\r\n\r\n  // pomoci reduxu vzdycky overwritujeme stary stav nejakym novym stavem.\r\n  if (action.type === \"increment\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter, // tohle nechame stejnee (tedy state). kdyz bychom to tady nenapsali,\r\n      // tak by to bylo undefined, coz se bere jako false, takze by ten counter zmizel.\r\n    };\r\n  }\r\n\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      counter: state.counter + action.value,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"decrement\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      counter: state.counter,\r\n      showCounter: !state.showCounter,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst store = createStore(counterReducer);\r\n*/\r\n\r\n/*\r\nDULEZITA POZNAMKA:\r\nNIKDY NESMIME MUTOVAT STATE:\r\nTohle je spatne:\r\nif (action.type === 'increment') {\r\n    state.counter++; // NEMUZEME MUTOVAT STAV. JEN VYTVARET NOVE OBJEKTY.\r\n    return state;\r\n}\r\n\r\nI tohle je spatne: \r\nif (action.type === 'increment') {\r\n    state.counter++;\r\n    return {\r\n        counter: state.counter,\r\n        showCounter: state.showCounter,\r\n    };\r\n}\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}