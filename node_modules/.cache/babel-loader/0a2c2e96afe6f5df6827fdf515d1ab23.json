{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n}; // pomoci createSlice delame slice naseho global state.\n// kazdy slice musi mit svuj name, initialState a reducers (metody), ktere tento slice potrebuje.\n// PRI POUZITI TOOLKITU UZ NEPOTREBUJEME IF CHECKS. VYLOZENE JEN PISEME METODY.\n// NAVIC MUZEME MUTOVAT STATE!!!!!!!!! ALE NE PRIMO. napiseme napr. state.counter++, coz je vlastne spatne. Ale redux Toolkit ma dalsi\n// package, pomoci ktereho si naclonuje stav a nedojde k mutovani stavu, nasledne prepise jen to, co my menime in immutable way. takhle se nam zjednodusi prace. nemusime pokazde opisovat stavovy objekt.\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  // puvodne jsme meli jen jeden slice a tim padem jeden initial state, ktery jsme nazvali initialState. pak jsme to pomoci moderniho JS mohli zapsat jen jako initialState. pomoci stareho zpusobu: initialState: initialState,\n  // ted mame vice slice a vice initialStatu, tzn musime to zapsat takhle. nejde jen initialCounterState.\n  reducers: {\n    // vsechny reducers muzou mit v inputu state a action. u incremenetu a decrementu jsme ale action nepotrebovali.\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload; // zde to nezapisujeme jako cast objektu (tzn. state.counter: state.counter+1), ale vylozene prepisujeme state.counter = ...\n      // bereme payload (automaticky vytvorene v tom objektu). ne value.\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport default counterSlice.reducer; // muzeme exportovat jen ten reducer. to je jedine o co nam vlastne jde.","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/redux-projekt-1/01-starting-project (2)/01-starting-project/src/store/counter.js"],"names":["createSlice","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","counterActions","actions","reducer"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AAEA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAA5B,C,CAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;AAC/BK,EAAAA,IAAI,EAAE,SADyB;AAE/BC,EAAAA,YAAY,EAAEL,mBAFiB;AAG/B;AACA;AACAM,EAAAA,QAAQ,EAAE;AACR;AACAC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACP,OAAN;AACD,KAJO;;AAKRQ,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACP,OAAN;AACD,KAPO;;AAQRS,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACtBH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC,CADsB,CAC0B;AAChD;AACD,KAXO;;AAYRC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AACnBA,MAAAA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;AACD;;AAdO;AALqB,CAAD,CAAhC;AAuBA,OAAO,MAAMY,cAAc,GAAGX,YAAY,CAACY,OAApC;AACP,eAAeZ,YAAY,CAACa,OAA5B,C,CAAqC","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\r\n\r\nconst initialCounterState = { counter: 0, showCounter: true };\r\n\r\n// pomoci createSlice delame slice naseho global state.\r\n// kazdy slice musi mit svuj name, initialState a reducers (metody), ktere tento slice potrebuje.\r\n// PRI POUZITI TOOLKITU UZ NEPOTREBUJEME IF CHECKS. VYLOZENE JEN PISEME METODY.\r\n// NAVIC MUZEME MUTOVAT STATE!!!!!!!!! ALE NE PRIMO. napiseme napr. state.counter++, coz je vlastne spatne. Ale redux Toolkit ma dalsi\r\n// package, pomoci ktereho si naclonuje stav a nedojde k mutovani stavu, nasledne prepise jen to, co my menime in immutable way. takhle se nam zjednodusi prace. nemusime pokazde opisovat stavovy objekt.\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: initialCounterState, \r\n  // puvodne jsme meli jen jeden slice a tim padem jeden initial state, ktery jsme nazvali initialState. pak jsme to pomoci moderniho JS mohli zapsat jen jako initialState. pomoci stareho zpusobu: initialState: initialState,\r\n  // ted mame vice slice a vice initialStatu, tzn musime to zapsat takhle. nejde jen initialCounterState.\r\n  reducers: {\r\n    // vsechny reducers muzou mit v inputu state a action. u incremenetu a decrementu jsme ale action nepotrebovali.\r\n    increment(state) {\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    increase(state, action) {\r\n      state.counter = state.counter + action.payload; // zde to nezapisujeme jako cast objektu (tzn. state.counter: state.counter+1), ale vylozene prepisujeme state.counter = ...\r\n      // bereme payload (automaticky vytvorene v tom objektu). ne value.\r\n    },\r\n    toggleCounter(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\nexport const counterActions = counterSlice.actions;\r\nexport default counterSlice.reducer; // muzeme exportovat jen ten reducer. to je jedine o co nam vlastne jde."]},"metadata":{},"sourceType":"module"}